{
    "Sample_DB": "\nBEGIN TRANSACTION;\n\nCREATE TABLE T_QueryLogs (\n\tLogTime      VARCHAR DEFAULT (datetime('now', 'localtime') ),\n\tQuerySQL     VARCHAR,\n\tQueryMsg     VARCHAR\n);\n\nCREATE TABLE T_TaskLogs (\n        ID              INTEGER PRIMARY KEY AUTOINCREMENT,\n        TaskId          VARCHAR,\n        TaskName        VARCHAR NOT NULL,\n        ProcessId       VARCHAR,\n        TaskStatus      VARCHAR,\n        StartDate       VARCHAR DEFAULT (datetime('now', 'localtime') ),\n        EndDate         VARCHAR,\n        ErrorMsg        VARCHAR,\n        Alerted         INTEGER DEFAULT (0),\n        TaskDbId        VARCHAR,\n        MasterTaskId    VARCHAR\n);\n\nCREATE TABLE T_SolverLog (\n    LogTime    VARCHAR DEFAULT (datetime('now', 'localtime') ),\n    LogMessage VARCHAR\n);\n\nCREATE TABLE S_ModelParams (\n    ParamName    VARCHAR,\n    ParamValue   VARCHAR\n);\n\nINSERT INTO S_ModelParams VALUES('ModelIcon','fas fa-cube');\nINSERT INTO S_ModelParams VALUES('ModelName','Sample DB');\nINSERT INTO S_ModelParams VALUES('DBVersion','1.0.0');\n\nCREATE TABLE S_TableParameters (\n    TableName      VARCHAR,\n    ColumnName     VARCHAR,\n    ParameterType  VARCHAR,\n    ParameterValue VARCHAR,\n    UNIQUE(TableName,ColumnName,ParameterType)\n);\n\nCREATE TABLE S_TableGroup (\n    GroupName        VARCHAR,\n    TableName        VARCHAR,\n    TableDisplayName VARCHAR,\n    TableType        VARCHAR,\n    ColumnOrder      VARCHAR,\n    Table_Status     VARCHAR,\n    Freeze_Col_Num   NUMERIC\n);\n\nINSERT INTO S_TableGroup (GroupName, TableName, TableDisplayName, TableType, ColumnOrder, Table_Status, Freeze_Col_Num) VALUES ('Log Tables', 'T_TaskLogs', 'Task Logs', 'Task Logs', NULL, 'Active', NULL);\nINSERT INTO S_TableGroup (GroupName, TableName, TableDisplayName, TableType, ColumnOrder, Table_Status, Freeze_Col_Num) VALUES ('Log Tables', 'T_SolverLog', 'Solver Logs', 'Solver Logs', NULL, 'Active', NULL);\nINSERT INTO S_TableGroup (GroupName, TableName, TableDisplayName, TableType, ColumnOrder, Table_Status, Freeze_Col_Num) VALUES ('Setups', 'S_TableGroup', 'Table Group', 'Input', NULL, 'Active', NULL);\nINSERT INTO S_TableGroup (GroupName, TableName, TableDisplayName, TableType, ColumnOrder, Table_Status, Freeze_Col_Num) VALUES ('Setups', 'S_TableParameters', 'Table Parameters', 'Input', NULL, 'Active', NULL);\nINSERT INTO S_TableGroup (GroupName, TableName, TableDisplayName, TableType, ColumnOrder, Table_Status, Freeze_Col_Num) VALUES ('Setups', 'S_TaskMaster', 'Task Master', 'Input', NULL, 'Active', NULL);\nINSERT INTO S_TableGroup (GroupName, TableName, TableDisplayName, TableType, ColumnOrder, Table_Status, Freeze_Col_Num) VALUES ('Setups', 'S_ExecutionFiles', 'Code Files', 'Input', NULL, 'Active', NULL);\nINSERT INTO S_TableGroup (GroupName, TableName, TableDisplayName, TableType, ColumnOrder, Table_Status, Freeze_Col_Num) VALUES ('All Other', 'V_TEMPV', 'Temp View', 'Output', NULL, 'Active', NULL);\nINSERT INTO S_TableGroup (GroupName, TableName, TableDisplayName, TableType, ColumnOrder, Table_Status, Freeze_Col_Num) VALUES('All Other','S_DataFiles','Data Files','Input','[\"FileId\",\"FileName\",\"FileType\",\"Status\"]','Active',NULL);\nINSERT INTO S_TableGroup (GroupName, TableName, TableDisplayName, TableType, ColumnOrder, Table_Status, Freeze_Col_Num) VALUES('All Other','S_PackageWheels','PackageWheels','Input','[\"WheelId\",\"WheelName\",\"Status\"]','Active',NULL);\nINSERT INTO S_TableGroup (GroupName, TableName, TableDisplayName, TableType, ColumnOrder, Table_Status, Freeze_Col_Num) VALUES('All Other','S_Notebooks','Notebooks','Input',null,'Active',NULL);\nINSERT INTO S_TableGroup (GroupName, TableName, TableDisplayName, TableType, ColumnOrder, Table_Status, Freeze_Col_Num) VALUES('All Other','S_NotebookContent','Notebook Contents','Input',null,'Active',NULL);\n\nCREATE TABLE S_TaskMaster (\n\tTaskId\t            INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\tTaskName\t        VARCHAR,\n\tTaskDisplayName\t    VARCHAR,\n\tTaskType\t        VARCHAR DEFAULT 'PythonScript',\n\tTaskParameters\t    VARCHAR,\n\tTaskStatus\t        VARCHAR,\n\tTaskLastRunDate\t    VARCHAR,\n\tTaskOutput\t        VARCHAR\n);\n\nINSERT INTO S_TaskMaster(TaskId, TaskName, TaskDisplayName,TaskType) VALUES(1,'cats.py','Download Cats','PythonScript');\nINSERT INTO S_TaskMaster(TaskId, TaskName, TaskDisplayName,TaskType) VALUES(2,'dogs.py','Show Dog','PythonScript');\n\nCREATE TABLE S_ExecutionFiles (\n\tFileId\t            INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\tFileName\t        VARCHAR,\n\tFileLabel   \t    VARCHAR,\n    FilePath            VARCHAR UNIQUE,\n    FileData            VARCHAR,\n\tStatus\t            VARCHAR DEFAULT ('Active')\t\n);\n\nINSERT INTO S_ExecutionFiles VALUES(1,'main.py',NULL,'main.py',replace('from foo.bar import main as bar\nfrom foo.foo import main as foo\n\nprint(\"Hello from main.py\")\nbar()\nfoo()','\n',char(10)),'Active');\nINSERT INTO S_ExecutionFiles VALUES(2,'bar.py',NULL,'foo/bar.py',replace('def main():\n    print(\"Hello from bar.py\")','\n',char(10)),'Active');\nINSERT INTO S_ExecutionFiles VALUES(3,'foo.py',NULL,'foo/foo.py',replace('def main():\n    print(\"Hello from foo.py\")','\n',char(10)),'Active');\nINSERT INTO S_ExecutionFiles VALUES(4,'requirements.txt',NULL,'requirements.txt',replace('urllib3\nPillow\npandas\nsqlite3\npulp\nhighspy','\n',char(10)),'Active');\nINSERT INTO S_ExecutionFiles VALUES(5,'dogs.py',NULL,'dogs.py',replace('# Sample code to display random dog images \nimport urllib3, json, os,io\nfrom pyodide.ffi import to_js\n\nurl = \"https://random.dog/woof.json\"\nresponse  = urllib3.request(\"GET\", url)\nimg_url = response.json()[''url'']\n\nextension = \"\"\n\nwhile extension not in (\"JPEG\", \"PNG\", \"JPG\", \"GIF\"):\n    response  = urllib3.request(\"GET\", url)\n    img_url = response.json()[''url'']\n    print(img_url)\n    extension = img_url.split(\".\")[-1].upper()\n\nresponse = urllib3.request(\"GET\", img_url)\n\nbuf = io.BytesIO(response.data)\n\nto_js(buf.getvalue())','\n',char(10)),'Active');\nINSERT INTO S_ExecutionFiles VALUES(6,'cats.py',NULL,'cats.py',replace('# Sample code to download random cat images \nimport urllib3, os,io, shutil\nfrom pyodide.ffi import to_js\nfrom PIL import Image\n\n# This is the Output Dir, which is accessible from HomePage\noutput_dir = r''outputDir/''\n\nexpected_size_collage = (900, 900)\nexpected_size_image = (300, 300)\n\ncollage = Image.new(\"RGBA\", expected_size_collage, color=(255,255,255,255))\nurl = \"https://cataas.com/cat?type=square\"\n\nfor h in range(0, expected_size_collage[1], expected_size_image[1]):\n    for w in range(0, expected_size_collage[0], expected_size_image[0]):\n        image_data  = urllib3.request(\"GET\", url).data\n        image = Image.open(io.BytesIO(image_data)).convert(\"RGBA\")\n\n        # Get the original image width and height\n        image_width = image.size[0]\n        image_height = image.size[1]\n\n        # Get how the width and height should be\n        width_factor = image_width / expected_size_image[0]\n        height_factor = image_height / expected_size_image[1]\n\n        image = image.resize(expected_size_image)\n\n        # Copy image to collage canvas\n        collage.paste(image, (w, h))\n\nout_collage = io.BytesIO()\ncollage.save(out_collage, \"PNG\")\n\n# Saving to outputDir, so it could be visible from HomePage \"Files --> OutputFiles\"\ncollage.save(''outputDir/cats.png'')\nout_collage.seek(0)\nto_js(out_collage.getvalue())','\n',char(10)),'Active');\nINSERT INTO S_ExecutionFiles VALUES(7,'list_input_files.py',NULL,'list_input_files.py',replace('import os\nprint(os.listdir(\"inputDir\"))','\n',char(10)),'Active');\nINSERT INTO S_ExecutionFiles VALUES(8,'pandaas.py',NULL,'pandaas.py',replace('import sqlite3\nimport pandas as pd\n\n# thisDB is a keyword for current SQLite database\nconn = sqlite3.connect(thisDB)\n\ndf = pd.read_sql_query(\"SELECT * from sqlite_master\", conn)\n\nall_tables = list(df[''tbl_name''][df.type == ''table''])\n\nfor table_name in all_tables:\n    query = f\"select count(*) from [{table_name}]\" \n    res = conn.execute(query).fetchall()\n    count = res[0][0]\n    if count > 0:\n        output_str = f\"Table {table_name} has {count} records\"\n        print(output_str)\n','\n',char(10)),'Active');\nINSERT INTO S_ExecutionFiles VALUES(9,'write_output_file.py',NULL,'write_output_file.py',replace('import os\\012\\012# This is the Output Dir, which is accessible from HomePage\\012output_dir = r''outputDir''\\012\\012input_file_name = f''{output_dir}/output_file.txt''\\012with open(input_file_name, ''w'') as fl:\\012    for i in range(100):\\012  \t    fl.write(f''Hello from ComputeLite! count({i+1})'')\\012    fl.close()\\012  \\012z = os.listdir(output_dir)\\012print(z)','\\012',char(10)),'Active');\nINSERT INTO S_ExecutionFiles VALUES(10,'update_sqlite_db.py',NULL,'update_sqlite_db.py',replace('import sqlite3\n\nquery = \"INSERT INTO T_SolverLog (LogMessage) Values (''Hello from ComputeLite'')\"\n\nwith sqlite3.connect(thisDB) as conn:\n    conn.execute(query)\n  \n# Check solver log table: Log Tables > Solver Logs\n','\n',char(10)),'Active');\nINSERT INTO S_ExecutionFiles VALUES(11,'blending_problem_with_pulp_highs.py',NULL,'blending_problem_with_pulp_highs.py',replace('# Import PuLP modeler functions\nfrom pulp import * \n\n# Create the ''prob'' variable to contain the problem data\nprob = LpProblem(\"The Whiskas Problem\", LpMinimize)\n# The 2 variables Beef and Chicken are created with a lower limit of zero\nx1 = LpVariable(\"ChickenPercent\", 0, None, LpInteger)\nx2 = LpVariable(\"BeefPercent\", 0)\n\n# The objective function is added to ''prob'' first\nprob += 0.013 * x1 + 0.008 * x2, \"Total Cost of Ingredients per can\"\n\n# The five constraints are entered\nprob += x1 + x2 == 100, \"PercentagesSum\"\nprob += 0.100 * x1 + 0.200 * x2 >= 8.0, \"ProteinRequirement\"\nprob += 0.080 * x1 + 0.100 * x2 >= 6.0, \"FatRequirement\"\nprob += 0.001 * x1 + 0.005 * x2 <= 2.0, \"FibreRequirement\"\nprob += 0.002 * x1 + 0.005 * x2 <= 0.4, \"SaltRequirement\"\n\nsolver = HiGHS() #Define HiGHS solver, include highspy in requirement.txt\nprob.writeLP(\"outputDir/WhiskasModel.lp\")\nprob.solve(solver) #Use HiGHS solver\nprint(\"Status:\", LpStatus[prob.status])\n\nfor v in prob.variables():\n    print(v.name, \"=\", v.varValue)\n\nprint(\"Total Cost of Ingredients per can = \", value(prob.objective))','\n',char(10)),'Active');\n\n\nCREATE TABLE S_DataFiles (\n\tFileId\t            INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\tFileName\t        VARCHAR,\n\tFileType   \t        VARCHAR,\n    FileBlob            BLOB NOT NULL,\n\tStatus\t            VARCHAR DEFAULT ('Active'),\n    UNIQUE(FileName,FileType)\t\n);\n\nCREATE TABLE S_PackageWheels (\n\tWheelId\t            INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\tWheelName\t        VARCHAR UNIQUE,\n    WheelBlob            BLOB NOT NULL,\n\tStatus\t            VARCHAR DEFAULT ('Active')\t\n);\n\nCREATE TABLE S_Notebooks (\n\tNotebookId\t    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\tName            VARCHAR,\n\tType\t\t\tVARCHAR,\n\tStatus\t    \tVARCHAR DEFAULT 'Active',\n\tCreationDate\tVARCHAR DEFAULT (datetime('now','localtime')),\n\tLastUpdateDate\tVARCHAR DEFAULT (datetime('now','localtime'))\n);\n\nINSERT INTO S_Notebooks (Name,Type,Status) VALUES ('Default','Javascript','Active');\nINSERT INTO S_Notebooks (Name,Type,Status) VALUES ('Default','Python','Active');\nINSERT INTO S_Notebooks (Name,Type,Status) VALUES ('Default','R','Active');\nINSERT INTO S_Notebooks (Name,Type,Status) VALUES ('D3_Examples','Javascript','Active');\n\nCREATE TABLE S_NotebookContent (\n    CellId\t        INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\tName            VARCHAR,\n    NotebookId      INTEGER NOT NULL,    \n\tCellContent\t    VARCHAR,\n    CellType        VARCHAR,\n\tCreationDate\tVARCHAR DEFAULT (datetime('now','localtime')),\n\tLastUpdateDate\tVARCHAR DEFAULT (datetime('now','localtime'))\n);\n\nINSERT INTO S_NotebookContent (Name, NotebookId, CellType, CellContent) VALUES ('Default', 1, 'javascript',REPLACE(\n'// Load external libraries dynamically from a CDN using loadCDNScripts\nawait loadCDNScripts([{ url: \"https://cdn.jsdelivr.net/npm/lodash/lodash.min.js\", globalVar: \"_\" },\n    { url: \"https://cdn.jsdelivr.net/npm/dayjs/dayjs.min.js\", globalVar: \"dayjs\" },\n    { url: \"https://cdn.jsdelivr.net/npm/chart.js\", globalVar: \"Chart\" }\n]);\n\nconsole.log(_.chunk([1, 2, 3, 4], 2));\n\nconsole.log(dayjs().format());\n\nconst canvas = document.createElement(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\nnew Chart(ctx, {\n    type: \"bar\",\n    data: {\n        labels: [\"Red\", \"Blue\", \"Yellow\"],\n        datasets: [{ \n            label: \"Votes\",\n            data: [12, 19, 3],\n            backgroundColor: [\"red\", \"blue\", \"yellow\"] \n        }] \n    } \n});\ncanvas', '\n', CHAR(10)\n));\nINSERT INTO S_NotebookContent (Name, NotebookId, CellType, CellContent) VALUES ('Default',1, 'javascript', REPLACE(\n'// Fetch data from the database\n// The executeQuery function executes an SQL query and retrieves data from the database.\n// In this case, we are selecting all records from the ''S_tablegroup'' table.\n\nconst result = await executeQuery(\"select * from S_tablegroup\")\nconsole.log(\"result\", result);', '\n', CHAR(10)\n));\nINSERT INTO S_NotebookContent (Name, NotebookId, CellType, CellContent) VALUES ('Default',1, 'javascript',REPLACE(\n'// Load external CSS dynamically from a CDN using loadCDNStylesheets\n\nawait loadCDNStylesheets([\n    { url: \"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" }\n]);', '\n', CHAR(10)\n));\n\nINSERT INTO S_NotebookContent (Name, NotebookId, CellType, CellContent) VALUES ('Default',2,'python',REPLACE(\n        'import matplotlib.pyplot as plt\n' ||\n        'import numpy as np\n',\n        '\n',\n        CHAR(10)\n    )\n);\n\nINSERT INTO S_NotebookContent (Name, NotebookId, CellType, CellContent) VALUES ('Default',2,'python',REPLACE(\n        'speciess = (\n' ||\n        '    \"Adelie\\n $\\\\mu=$3700.66g\",\n' ||\n        '    \"Chinstrap\\n $\\\\mu=$3733.09g\",\n' ||\n        '    \"Gentoo\\n $\\\\mu=5076.02g$\",\n' ||\n        ')\n' ||\n        'wght_counts = {\n' ||\n        '    \"Below\": np.array([70, 31, 58]),\n' ||\n        '    \"Above\": np.array([82, 37, 66]),\n' ||\n        '}\n' ||\n        'widths = 0.5\n' ||\n        '\n' ||\n        'fig, ax = plt.subplots()\n' ||\n        'bottom = np.zeros(3)\n' ||\n        '\n' ||\n        'for boolean, weight_count in wght_counts.items():\n' ||\n        '    ax.bar(speciess, weight_count, widths, label=boolean, bottom=bottom)\n' ||\n        '    bottom += weight_count\n' ||\n        '\n' ||\n        'ax.set_title(\"Number of penguins with above average body mass\")\n' ||\n        'ax.legend(loc=\"upper right\")\n' ||\n        '\n' ||\n        'plt.show()\n',\n        '\n',\n        CHAR(10)\n    )\n);\n\nINSERT INTO S_NotebookContent (Name, NotebookId, CellType, CellContent) VALUES ('Default',2,'python',REPLACE(\n        'np.random.seed(19680801)\n' ||\n        '\n' ||\n        'dt = 0.01\n' ||\n        't = np.arange(0, 30, dt)\n' ||\n        'nse1 = np.random.randn(len(t))  # white noise 1\n' ||\n        'nse2 = np.random.randn(len(t))  # white noise 2\n' ||\n        '\n' ||\n        '# Two signals with a coherent part at 10 Hz and a random part\n' ||\n        's1 = np.sin(2 * np.pi * 10 * t) + nse1\n' ||\n        's2 = np.sin(2 * np.pi * 10 * t) + nse2\n' ||\n        '\n' ||\n        'fig, axs = plt.subplots(2, 1, layout=\"constrained\")\n' ||\n        'axs[0].plot(t, s1, t, s2)\n' ||\n        'axs[0].set_xlim(0, 2)\n' ||\n        'axs[0].set_xlabel(\"Time (s)\")\n' ||\n        'axs[0].set_ylabel(\"s1 and s2\")\n' ||\n        'axs[0].grid(True)\n' ||\n        '\n' ||\n        'cxy, f = axs[1].cohere(s1, s2, NFFT=256, Fs=1. / dt)\n' ||\n        'axs[1].set_ylabel(\"Coherence\")\n' ||\n        '\n' ||\n        'plt.show()\n',\n        '\n',\n        CHAR(10)\n    )\n);\n\n\nINSERT INTO S_NotebookContent (Name, NotebookId, CellType, CellContent) VALUES ('Default',3,'r',REPLACE(\n        '# Plotting a simple graph\n' ||\n        'plot(1:10, (1:10)^2, type = \"b\",\n' ||\n        '     col = \"blue\",\n' ||\n        '     main = \"Simple Plot\",\n' ||\n        '     xlab = \"X-Axis\",\n' ||\n        '     ylab = \"Y-Axis\")\n',\n        '\n',\n        CHAR(10)\n    )\n);\n\nINSERT INTO S_NotebookContent (Name, NotebookId, CellType, CellContent) VALUES ('Default',3,'r',REPLACE(\n        'population_vector <- c(10, 20, 30, 40, 50)\n' ||\n        '\n' ||\n        'sampled_vector <- sample(population_vector, size = 3, replace = TRUE)\n' ||\n        'print(sampled_vector)\n',\n        '\n',\n        CHAR(10)\n    )\n);\n\nINSERT INTO S_NotebookContent (Name, NotebookId, CellType, CellContent) VALUES ('Default',3,'r',REPLACE(\n        '# Load the package\n' ||\n        'library(ggplot2)\n' ||\n        '\n' ||\n        '# Run a sample function from ggplot2 to verify installation\n' ||\n        'print(ggplot(mpg, aes(x = displ, y = hwy)) + geom_point())\n',\n        '\n',\n        CHAR(10)\n    )\n);\n\nINSERT INTO S_NotebookContent (Name, NotebookId, CellType, CellContent) \nVALUES ('D3_Examples', 4, 'javascript', REPLACE(\n'// Load external libraries dynamically from a CDN using loadCDNScripts\n' ||\n'await loadCDNScripts([\n' ||\n'    { url: \"https://cdn.jsdelivr.net/npm/lodash/lodash.min.js\", globalVar: \"_\" },\n' ||\n'    { url: \"https://cdn.jsdelivr.net/npm/dayjs/dayjs.min.js\", globalVar: \"dayjs\" },\n' ||\n'    { url: \"https://cdn.jsdelivr.net/npm/chart.js\", globalVar: \"Chart\" },\n' ||\n'    { url: \"https://cdn.jsdelivr.net/npm/d3@7\", globalVar: \"d3\" },\n' ||\n'    { url: \"https://cdn.jsdelivr.net/npm/topojson@3.0.2/dist/topojson.min.js\", globalVar: \"topojson\" }\n' ||\n']);',\n'\n', CHAR(10)\n));\n\nINSERT INTO S_NotebookContent (Name, NotebookId, CellType, CellContent) \nVALUES ('D3_Examples', 4, 'javascript', REPLACE(\n'height = 500\n' ||\n'width = 500\n' ||\n'radius = 6\n' ||\n'step = radius * 2\n' ||\n'theta = Math.PI * (3 - Math.sqrt(5))\n\n' ||\n\n'zoomingData = Array.from({length: 2000}, (_, i) => {\n' ||\n'  const r = step * Math.sqrt(i += 0.5), a = theta * i;\n' ||\n'  return [\n' ||\n'    width / 2 + r * Math.cos(a),\n' ||\n'    height / 2 + r * Math.sin(a)\n' ||\n'  ];\n' ||\n'})\n\n' ||\n\n'zoomingChart = (() => {\n' ||\n'  let currentTransform = [width / 2, height / 2, height];\n\n' ||\n\n'  const svg = d3.create(\"svg\")\n' ||\n'      .attr(\"viewBox\", [0, 0, width, height]);\n\n' ||\n\n'  const g = svg.append(\"g\");\n\n' ||\n\n'  g.selectAll(\"circle\")\n' ||\n'    .data(zoomingData)\n' ||\n'    .join(\"circle\")\n' ||\n'      .attr(\"cx\", ([x]) => x)\n' ||\n'      .attr(\"cy\", ([, y]) => y)\n' ||\n'      .attr(\"r\", radius)\n' ||\n'      .attr(\"fill\", (d, i) => d3.interpolateRainbow(i / 360));\n\n' ||\n\n'  function transition() {\n' ||\n'    const d = zoomingData[Math.floor(Math.random() * zoomingData.length)];\n' ||\n'    const i = d3.interpolateZoom(currentTransform, [...d, radius * 2 + 1]);\n\n' ||\n\n'    g.transition()\n' ||\n'        .delay(250)\n' ||\n'        .duration(i.duration)\n' ||\n'        .attrTween(\"transform\", () => t => transform(currentTransform = i(t)))\n' ||\n'        .on(\"end\", transition);\n' ||\n'  }\n\n' ||\n\n'  function transform([x, y, r]) {\n' ||\n'    return `\n' ||\n'      translate(${width / 2}, ${height / 2})\n' ||\n'      scale(${height / r})\n' ||\n'      translate(${-x}, ${-y})\n' ||\n'    `;\n' ||\n'  }\n\n' ||\n\n'  return svg.call(transition).node();\n' ||\n'})();\n\n' ||\n\n'thisDiv.appendChild(zoomingChart);',\n'\n', CHAR(10)\n));\n\nINSERT INTO S_NotebookContent (Name, NotebookId, CellType, CellContent) \nVALUES ('D3_Examples', 4, 'javascript', REPLACE(\n'const k = 10;\n' ||\n'const m = 200;\n' ||\n'const n = 20;\n\n' ||\n\n'// Define the bump function separately\n' ||\n'function bump(a, n) {\n' ||\n'  const x = 1 / (0.1 + Math.random());\n' ||\n'  const y = 2 * Math.random() - 0.5;\n' ||\n'  const z = 10 / (0.1 + Math.random());\n' ||\n'  for (let i = 0; i < n; ++i) {\n' ||\n'    const w = (i / n - y) * z;\n' ||\n'    a[i] += x * Math.exp(-w * w);\n' ||\n'  }\n' ||\n'}\n\n' ||\n\n'// Define the bumps function properly\n' ||\n'function bumps(n, m) {\n' ||\n'  const a = Array(n).fill(0); // Initialize array with zeros\n' ||\n'  for (let i = 0; i < m; ++i) bump(a, n);\n' ||\n'  return a;\n' ||\n'}\n\n' ||\n\n'// Define and render the stream graph\n' ||\n'async function streamChart() {\n' ||\n'  const width = 928;\n' ||\n'  const height = 500;\n\n' ||\n\n'  const x = d3.scaleLinear([0, m - 1], [0, width]);\n' ||\n'  const y = d3.scaleLinear([0, 1], [height, 0]);\n' ||\n'  const z = d3.interpolateCool;\n\n' ||\n\n'  const area = d3.area()\n' ||\n'    .x((d, i) => x(i))\n' ||\n'    .y0(d => y(d[0]))\n' ||\n'    .y1(d => y(d[1]));\n\n' ||\n\n'  const stack = d3.stack()\n' ||\n'    .keys(d3.range(n))\n' ||\n'    .offset(d3.stackOffsetWiggle)\n' || \n'    .order(d3.stackOrderNone);\n\n' ||\n\n'  function randomize() {\n' ||\n'    const layers = stack(d3.transpose(Array.from({ length: n }, () => bumps(m, k))));\n' ||\n'    y.domain([\n' ||\n'      d3.min(layers, l => d3.min(l, d => d[0])),\n' ||\n'      d3.max(layers, l => d3.max(l, d => d[1]))\n' ||\n'    ]);\n' ||\n'    return layers;\n' ||\n'  }\n\n' ||\n\n'  const svg = d3.create(\"svg\")\n' ||\n'    .attr(\"viewBox\", [0, 0, width, height])\n' ||\n'    .attr(\"width\", width)\n' ||\n'    .attr(\"height\", height)\n' ||\n'    .attr(\"style\", \"max-width: 100%; height: auto;\");\n\n' ||\n\n'  const path = svg.selectAll(\"path\")\n' ||\n'    .data(randomize())\n' ||\n'    .join(\"path\")\n' ||\n'    .attr(\"d\", area)\n' ||\n'    .attr(\"fill\", () => z(Math.random()));\n\n' ||\n\n'  // Ensure `outputArea` exists\n' ||\n'  thisDiv.appendChild(svg.node());\n\n' ||\n\n'  // Animation Loop\n' ||\n'  while (true) {\n' ||\n'    await new Promise(resolve => setTimeout(resolve, 1000));\n\n' ||\n\n'    await path\n' ||\n'      .data(randomize())\n' ||\n'      .transition()\n' ||\n'      .duration(1500)\n' ||\n'      .attr(\"d\", area)\n' ||\n'      .end();\n' ||\n'  }\n' ||\n'}\n\n' ||\n\n'// Run the chart\n' ||\n'streamChart();',\n'\n', CHAR(10)\n));\n\nINSERT INTO S_NotebookContent (Name, NotebookId, CellType, CellContent) \nVALUES ('D3_Examples', 4, 'javascript', REPLACE(\n'arcChart = (() => {\n' ||\n'  const width = 500;\n' ||\n'  const height = Math.min(500, width / 2);\n' ||\n'  const outerRadius = height / 2 - 10;\n' ||\n'  const innerRadius = outerRadius * 0.75;\n\n' ||\n\n'  const tau = 2 * Math.PI;\n\n' ||\n\n'  const svg = d3.create(\"svg\")\n' ||\n'    .attr(\"viewBox\", [0, 0, width, height]);\n\n' ||\n\n'  const g = svg.append(\"g\")\n' ||\n'    .attr(\"transform\", `translate(${width / 2},${height / 2})`);\n\n' ||\n\n'  const arc = d3.arc()\n' ||\n'    .innerRadius(innerRadius)\n' ||\n'    .outerRadius(outerRadius)\n' ||\n'    .startAngle(0);\n\n' ||\n\n'  // Background arc\n' ||\n'  g.append(\"path\")\n' ||\n'    .datum({ endAngle: tau })\n' ||\n'    .style(\"fill\", \"#ddd\")\n' ||\n'    .attr(\"d\", arc);\n\n' ||\n\n'  // Foreground arc\n' ||\n'  const foreground = g.append(\"path\")\n' ||\n'    .datum({ endAngle: 0.127 * tau })\n' ||\n'    .style(\"fill\", \"orange\")\n' ||\n'    .attr(\"d\", arc);\n\n' ||\n\n'  // Transition function\n' ||\n'  function arcTween(newAngle) {\n' ||\n'    return function(d) {\n' ||\n'      const interpolate = d3.interpolate(d.endAngle, newAngle);\n' ||\n'      return function(t) {\n' ||\n'        d.endAngle = interpolate(t);\n' ||\n'        return arc(d);\n' ||\n'      };\n' ||\n'    };\n' ||\n'  }\n\n' ||\n\n'  // Interval for animation\n' ||\n'  const interval = d3.interval(() => {\n' ||\n'    foreground.transition()\n' ||\n'      .duration(750)\n' ||\n'      .attrTween(\"d\", arcTween(Math.random() * tau));\n' ||\n'  }, 1500);\n\n' ||\n\n'  // Return the SVG node\n' ||\n'  return svg.node();\n' ||\n'})();\n\n' ||\n\n'thisDiv.appendChild(arcChart);',\n'\n', CHAR(10)\n));\n\nINSERT INTO S_NotebookContent (Name, NotebookId, CellType, CellContent) \nVALUES ('D3_Examples', 4, 'javascript', REPLACE(\n'chordData = Object.assign([\n' ||\n'  [.096899, .008859, .000554, .004430, .025471, .024363, .005537, .025471],\n' ||\n'  [.001107, .018272, .000000, .004983, .011074, .010520, .002215, .004983],\n' ||\n'  [.000554, .002769, .002215, .002215, .003876, .008306, .000554, .003322],\n' ||\n'  [.000554, .001107, .000554, .012182, .011628, .006645, .004983, .010520],\n' ||\n'  [.002215, .004430, .000000, .002769, .104097, .012182, .004983, .028239],\n' ||\n'  [.011628, .026024, .000000, .013843, .087486, .168328, .017165, .055925],\n' ||\n'  [.000554, .004983, .000000, .003322, .004430, .008859, .017719, .004430],\n' ||\n'  [.002215, .007198, .000000, .003322, .016611, .014950, .001107, .054264]\n' ||\n'], {\n' ||\n'  names: [\"Apple\", \"HTC\", \"Huawei\", \"LG\", \"Nokia\", \"Samsung\", \"Sony\", \"Other\"],\n' ||\n'  colors: [\"#c4c4c4\", \"#69b40f\", \"#ec1d25\", \"#c8125c\", \"#008fc8\", \"#10218b\", \"#134b24\", \"#737373\"]\n' ||\n'});\n\n' ||\n\n'function groupTicks(d, step) {\n' ||\n'  const k = (d.endAngle - d.startAngle) / d.value;\n' ||\n'  return d3.range(0, d.value, step).map(value => ({\n' ||\n'    value: value,\n' ||\n'    angle: value * k + d.startAngle\n' ||\n'  }));\n' ||\n'}\n\n' ||\n\n'chordChart = (() => {\n' ||\n'  const width = 928;\n' ||\n'  const height = width;\n' ||\n'  const { names, colors } = chordData;\n' ||\n'  const outerRadius = Math.min(width, height) * 0.5 - 60;\n' ||\n'  const innerRadius = outerRadius - 10;\n' ||\n'  const tickStep = d3.tickStep(0, d3.sum(chordData.flat()), 100);\n' ||\n'  const formatValue = d3.format(\".1%\");\n\n' ||\n\n'  const chord = d3.chord()\n' ||\n'      .padAngle(0.02)\n' ||\n'      .sortSubgroups(d3.descending)\n' ||\n'      .sortChords(d3.descending);\n\n' ||\n\n'  const arc = d3.arc()\n' ||\n'      .innerRadius(innerRadius)\n' ||\n'      .outerRadius(outerRadius);\n\n' ||\n\n'  const ribbon = d3.ribbon()\n' ||\n'      .radius(innerRadius - 1)\n' ||\n'      .padAngle(0.01);\n\n' ||\n\n'  const color = d3.scaleOrdinal(names, colors);\n\n' ||\n\n'  const svg = d3.create(\"svg\")\n' ||\n'      .attr(\"width\", width)\n' ||\n'      .attr(\"height\", height)\n' ||\n'      .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n' ||\n'      .attr(\"style\", \"width: 100%; height: auto; font: 10px sans-serif;\");\n\n' ||\n\n'  const chords = chord(chordData);\n\n' ||\n\n'  const group = svg.append(\"g\")\n' ||\n'    .selectAll(\"g\")\n' ||\n'    .data(chords.groups)\n' ||\n'    .join(\"g\");\n\n' ||\n\n'  group.append(\"path\")\n' ||\n'      .attr(\"fill\", d => color(names[d.index]))\n' ||\n'      .attr(\"d\", arc);\n\n' ||\n\n'  group.append(\"title\")\n' ||\n'      .text(d => `${names[d.index]}\n${formatValue(d.value)}`);\n\n' ||\n\n'  const groupTick = group.append(\"g\")\n' ||\n'    .selectAll(\"g\")\n' ||\n'    .data(d => groupTicks(d, tickStep))\n' ||\n'    .join(\"g\")\n' ||\n'      .attr(\"transform\", d => `rotate(${d.angle * 180 / Math.PI - 90}) translate(${outerRadius},0)`);\n\n' ||\n\n'  groupTick.append(\"line\")\n' ||\n'      .attr(\"stroke\", \"currentColor\")\n' ||\n'      .attr(\"x2\", 6);\n\n' ||\n\n'  groupTick.append(\"text\")\n' ||\n'      .attr(\"x\", 8)\n' ||\n'      .attr(\"dy\", \"0.35em\")\n' ||\n'      .attr(\"transform\", d => d.angle > Math.PI ? \"rotate(180) translate(-16)\" : null)\n' ||\n'      .attr(\"text-anchor\", d => d.angle > Math.PI ? \"end\" : null)\n' ||\n'      .text(d => formatValue(d.value));\n\n' ||\n\n'  group.select(\"text\")\n' ||\n'      .attr(\"font-weight\", \"bold\")\n' ||\n'      .text(function(d) {\n' ||\n'        return this.getAttribute(\"text-anchor\") === \"end\"\n' ||\n'            ? `\u2191 ${names[d.index]}`\n' ||\n'            : `${names[d.index]} \u2193`;\n' ||\n'      });\n\n' ||\n\n'  svg.append(\"g\")\n' ||\n'      .attr(\"fill-opacity\", 0.8)\n' ||\n'    .selectAll(\"path\")\n' ||\n'    .data(chords)\n' ||\n'    .join(\"path\")\n' ||\n'      .style(\"mix-blend-mode\", \"multiply\")\n' ||\n'      .attr(\"fill\", d => color(names[d.source.index]))\n' ||\n'      .attr(\"d\", ribbon)\n' ||\n'    .append(\"title\")\n' ||\n'      .text(d => `${formatValue(d.source.value)} ${names[d.target.index]} \u2192 ${names[d.source.index]}${\n        d.source.index === d.target.index ? \"\" : `\n${formatValue(d.target.value)} ${names[d.source.index]} \u2192 ${names[d.target.index]}`\n      }`);\n\n' ||\n\n'  return svg.node();\n' ||\n'})();\n\n' ||\n\n'thisDiv.appendChild(chordChart);',\n'\n', CHAR(10)\n));\n\n\n\nCREATE VIEW V_TEMPV\nAS SELECT 1;\n\nCOMMIT TRANSACTION;\n"
}